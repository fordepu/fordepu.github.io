<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker</title>
    <url>/2025/02/15/docker/</url>
    <content><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-使用快捷脚本进行安装"><a href="#1-使用快捷脚本进行安装" class="headerlink" title="1.  使用快捷脚本进行安装"></a>1.  使用快捷脚本进行安装</h3><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中</p>
<h3 id="2-配置镜像"><a href="#2-配置镜像" class="headerlink" title="2. 配置镜像"></a>2. 配置镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/docker/daemon.json <span class="comment"># 创建配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件输入以下内容</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;https://2a6bf1988cb6428c877f723ec7530dbc.mirror.swr.myhuaweicloud.com&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://your_preferred_mirror&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://dockerhub.icu&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.registry.cyou&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker-cf.registry.cyou&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://dockercf.jsdelivr.fyi&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.jsdelivr.fyi&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://dockertest.jsdelivr.fyi&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://dockerproxy.com&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.nju.edu.cn&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://mirror.iscas.ac.cn&quot;</span>,</span><br><span class="line">     <span class="string">&quot;https://docker.rainbond.cc&quot;</span>,</span><br><span class="line">     <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>使用<code>sudo docker run hello-world</code>进行测试</p>
<h3 id="3-配置代理"><a href="#3-配置代理" class="headerlink" title="3. 配置代理"></a>3. 配置代理</h3><p>详细操作见<a href="https://neucrack.com/p/286">博客 </a></p>
<p>有了网络代理后，便不需要配置镜像源了</p>
<p>在执行docker pull时，是由守护进程dockerd来执行。因此，代理需要配在dockerd的环境中。而这个环境，则是受systemd所管控，因此实际是systemd的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">touch</span> /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure>

<p>在这个proxy.conf文件（可以是任意*.conf的形式）中，添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="4-配置用户组"><a href="#4-配置用户组" class="headerlink" title="4. 配置用户组"></a>4. 配置用户组</h3><p>默认情况下，只有root用户和docker组的用户才能运行Docker命令。我们可以将当前用户添加到docker组，以避免每次使用Docker时都需要使用sudo。命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<p>可能需要重启才会生效</p>
<h2 id="二、docker指令"><a href="#二、docker指令" class="headerlink" title="二、docker指令"></a>二、docker指令</h2><h3 id="1-docker-run"><a href="#1-docker-run" class="headerlink" title="1. docker run"></a>1. docker run</h3><ul>
<li><strong><code>-d</code></strong>: 后台运行容器并返回容器 ID。</li>
<li><strong><code>-it</code></strong>: 交互式运行容器，分配一个伪终端。</li>
<li><strong><code>--name</code></strong>: 给容器指定一个名称。</li>
<li><strong><code>-p</code></strong>: 端口映射，格式为 <code>host_port:container_port</code>。</li>
<li><strong><code>-v</code></strong>: 挂载卷，格式为 <code>host_dir:container_dir</code>。</li>
<li><strong><code>--rm</code></strong>: 容器停止后自动删除容器。</li>
<li><strong><code>--env</code> 或 <code>-e</code></strong>: 设置环境变量。</li>
<li><strong><code>--network</code></strong>: 指定容器的网络模式。</li>
<li><strong><code>--restart</code></strong>: 容器的重启策略（如 <code>no</code>、<code>on-failure</code>、<code>always</code>、<code>unless-stopped</code>)</li>
<li><strong><code>-u</code></strong>: 指定用户。</li>
</ul>
<p><strong>注意：<code>docker run</code>会创建一个新的容器，而不是只是运行容器</strong></p>
<p>详细指令见<a href="https://docs.docker.com/reference/cli/docker/">官网</a></p>
<h3 id="2-数据卷挂载"><a href="#2-数据卷挂载" class="headerlink" title="2. 数据卷挂载"></a>2. 数据卷挂载</h3><p>因为在容器内部中，只有使容器运行起来的必备命令，并没有如<code>vim</code>,<code>vi</code>这样的命令，所以想要直接进入容器内，修改容器内中的文件比较困难。</p>
<p>而<strong>数据卷</strong>是一个虚拟目录，是<strong>容器内部目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁</p>
<blockquote>
<p><code>docker volume create</code>   创建数据卷</p>
<p><code>docker volume ls</code>    查看所有数据卷</p>
<p><code>docker volume rm</code>    删除数据卷</p>
<p><code>docker volume inspect</code>    查看数据卷详情</p>
<p><code>docker volume prune</code>    清除数据卷</p>
</blockquote>
<p><strong>注意：只有在<code>docker run</code>创建容器时，才能挂载</strong></p>
<p>使用 <code>-v 数据卷:容器内目录</code> 进行挂载</p>
<p><strong>挂载方式：</strong></p>
<ul>
<li>命名卷挂载：命名卷是由 Docker 管理的卷，具有一个唯一的名称。Docker 会自动为命名卷分配存储位置，通常在 <code>/var/lib/docker/volumes/</code> 目录下。实例：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v my_volume:/container/path ubuntu</span><br></pre></td></tr></table></figure>

<ul>
<li><p>绑定挂载：绑定挂载允许你将宿主机上的目录或文件直接映射到容器内部。这种方式非常适合开发环境，因为它允许实时同步宿主机和容器之间的文件。<strong>注意：宿主机上的路径必须提前创建。且本地目录必须以<code>/</code>或<code>./</code>开头，如果直接以名称开头，会被识别为数据卷而非本地目录</strong>   </p>
<p>示例：自定义创建并挂载<code>mysql</code>容器</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql -p 3307:3306 \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">-v ./mysql/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">--user $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) \</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>匿名卷：匿名卷是没有名称的卷，由 Docker 自动创建，通常用于临时存储数据。且匿名卷的数据存储在宿主机的 <code>/var/lib/docker/volumes/</code> 目录下，示例：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v /container/path ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>注意：无论是哪种挂载方式，只要挂载成功后，真实数据实际上都存放在宿主机中，在容器内部的文件路径是映射的</strong></p>
<h2 id="三、自定义镜像"><a href="#三、自定义镜像" class="headerlink" title="三、自定义镜像"></a>三、自定义镜像</h2><p>    镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包。构建镜像的过程实际就是把上述文件打包的过程</p>
<h3 id="1-编写-Dockerfile"><a href="#1-编写-Dockerfile" class="headerlink" title="1. 编写 Dockerfile"></a>1. 编写 Dockerfile</h3><p>Dockerfile就是一个文本文件，其中包含一个个的指令(Instruction)，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像。常见指令如下</p>
<p><img src="/2025/02/15/docker/t01.png" alt="指令"></p>
<p>示例，我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构，也可以直接基于JDK为基础镜像，省略前面的步骤，如下图</p>
<img src="/2025/02/15/docker/t02.png" title alt="示例" width="684">

<h3 id="2-构建镜像"><a href="#2-构建镜像" class="headerlink" title="2. 构建镜像"></a>2. 构建镜像</h3><p>当编写好了Dockerfile，可以利用下面命令来构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t myImage:1.0 .</span><br></pre></td></tr></table></figure>

<p>其中</p>
<ul>
<li><p><code>-t</code>:是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p>
</li>
<li><p><code>.</code>: 是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2025/02/12/git/</url>
    <content><![CDATA[<h2 id="一、git安装"><a href="#一、git安装" class="headerlink" title="一、git安装"></a>一、git安装</h2><h3 id="1-ubuntu使用"><a href="#1-ubuntu使用" class="headerlink" title="1. ubuntu使用"></a>1. ubuntu使用</h3><p> <code>sudo apt-get install git</code>，使用<code>git --version</code>查看是否安装成功.</p>
<h3 id="2-设置邮箱与用户名"><a href="#2-设置邮箱与用户名" class="headerlink" title="2. 设置邮箱与用户名"></a>2. 设置邮箱与用户名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --list //查看是否设置成功</span><br></pre></td></tr></table></figure>

<h3 id="3-设置全局编译器"><a href="#3-设置全局编译器" class="headerlink" title="3. 设置全局编译器"></a>3. 设置全局编译器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor <span class="string">&quot;vim&quot;</span> // 设置编译器为vim,否则默认为nano</span><br></pre></td></tr></table></figure>

<h2 id="二、配置ssh-key"><a href="#二、配置ssh-key" class="headerlink" title="二、配置ssh key"></a>二、配置ssh key</h2><h3 id="1-生成ssh-key-使用邮箱作为注释"><a href="#1-生成ssh-key-使用邮箱作为注释" class="headerlink" title="1. 生成ssh key,使用邮箱作为注释"></a>1. 生成ssh key,使用邮箱作为注释</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xxx.com&quot;</span></span><br><span class="line">//执行后一直回车即可</span><br></pre></td></tr></table></figure>

<h3 id="2-复制ssh-key中的内容"><a href="#2-复制ssh-key中的内容" class="headerlink" title="2. 复制ssh key中的内容"></a>2. 复制ssh key中的内容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure>

<h3 id="3-ssh目录下创建config文件"><a href="#3-ssh目录下创建config文件" class="headerlink" title="3. ~&#x2F;.ssh目录下创建config文件"></a>3. ~&#x2F;.ssh目录下创建config文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config //创建文件</span><br></pre></td></tr></table></figure>

<p>     config文件添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br><span class="line">  IdentityFile ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>

<h3 id="4-在github上添加公钥"><a href="#4-在github上添加公钥" class="headerlink" title="4. 在github上添加公钥"></a>4. 在github上添加公钥</h3><img title src="/2025/02/12/git/t01.png" alt="添加公钥" width="680">

<h3 id="5-验证测试是否成功"><a href="#5-验证测试是否成功" class="headerlink" title="5. 验证测试是否成功"></a>5. 验证测试是否成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>    显示如下信息，代表成功</p>
<p><img src="/2025/02/12/git/t02.png" alt="验证"></p>
<h2 id="三、本地使用git"><a href="#三、本地使用git" class="headerlink" title="三、本地使用git"></a>三、本地使用git</h2><h3 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h3><p>    在项目根目录下使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>    会在项目根目录下创建一个隐藏文件.git</p>
<h3 id="2-git三个区域"><a href="#2-git三个区域" class="headerlink" title="2. git三个区域"></a>2. git三个区域</h3><h4 id="2-1-工作区"><a href="#2-1-工作区" class="headerlink" title="2.1 工作区"></a>2.1 工作区</h4><p>        实际开发时操作的文件夹</p>
<h4 id="2-2-暂存区"><a href="#2-2-暂存区" class="headerlink" title="2.2 暂存区"></a>2.2 暂存区</h4><p>        保存之前的准备区域(暂存改动过的文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 文件路径 //暂存指定文件</span><br><span class="line">git add . //暂存所用改动的文件</span><br><span class="line">git ls-files //查看所有暂存区中的文件</span><br></pre></td></tr></table></figure>

<p>        暂存区 <strong>恢复</strong> 工作区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore 目标文件路径</span><br></pre></td></tr></table></figure>

<p>        删除暂存区的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached 目标文件路径</span><br></pre></td></tr></table></figure>

<h4 id="2-3-版本库"><a href="#2-3-版本库" class="headerlink" title="2.3 版本库"></a>2.3 版本库</h4><p>        提交并保存暂存中的内容，产生一个版本快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;注释&quot;</span> //提交并保存，产生版本快照</span><br></pre></td></tr></table></figure>

<p>        查看已提交的快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> // 查看详细信息,显示完整哈希值</span><br><span class="line">git <span class="built_in">log</span> --oneline // 查看简单提交信息,显示哈希值前7位</span><br><span class="line">git reflog --oneline // 在回退版本后查看所有的版本</span><br></pre></td></tr></table></figure>

<h3 id="3-git文件种状态"><a href="#3-git文件种状态" class="headerlink" title="3. git文件种状态"></a>3. git文件种状态</h3><h4 id="3-1-未跟踪-U-新文件，从未被git管理过"><a href="#3-1-未跟踪-U-新文件，从未被git管理过" class="headerlink" title="3.1 未跟踪(U): 新文件，从未被git管理过"></a>3.1 未跟踪(U): 新文件，从未被git管理过</h4><h4 id="3-2-已跟踪-git已经知道和管理过的文件"><a href="#3-2-已跟踪-git已经知道和管理过的文件" class="headerlink" title="3.2 已跟踪: git已经知道和管理过的文件"></a>3.2 已跟踪: git已经知道和管理过的文件</h4><h4 id="3-3-新添加-A-第一次被git暂存"><a href="#3-3-新添加-A-第一次被git暂存" class="headerlink" title="3.3 新添加(A): 第一次被git暂存"></a>3.3 新添加(A): 第一次被git暂存</h4><h4 id="3-4-未修改-‘’-三个区域统一"><a href="#3-4-未修改-‘’-三个区域统一" class="headerlink" title="3.4 未修改(‘’): 三个区域统一"></a>3.4 未修改(‘’): 三个区域统一</h4><h4 id="3-5-已修改-M-工作区内容发生变化"><a href="#3-5-已修改-M-工作区内容发生变化" class="headerlink" title="3.5 已修改(M): 工作区内容发生变化"></a>3.5 已修改(M): 工作区内容发生变化</h4><p>使用git status查看文件状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s // 使输出内容更简单</span><br></pre></td></tr></table></figure>

<h3 id="4-git回退版本"><a href="#4-git回退版本" class="headerlink" title="4. git回退版本"></a>4. git回退版本</h3><p>    3种回退命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft 版本号 // 版本号通过git <span class="built_in">log</span> --oneline查看</span><br><span class="line">git reset --hard 版本号</span><br><span class="line">git reset --mixed 版本号 // 默认mixed,等同于git reset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git reflog --oneline //回退版本后，可以使用命令查看所有的版本号，进行恢复</span><br></pre></td></tr></table></figure>

<p>    总结: </p>
<ul>
<li><p>–soft 对工作区与暂存区的内容都不会改变,主要用于将不必要的commit进行合并</p>
</li>
<li><p>–mixed 会保留工作区的内容,清空暂存区的内容,主要用于修改错误的代码</p>
</li>
<li><p>–hard 会清空工作区与暂存区的内容,适用于重置节点后所用内容都不想留下的情况</p>
</li>
</ul>
<p>   详细区别见<a href="https://blog.csdn.net/2301_77946674/article/details/142850909">博客</a> ,使用场景见<a href="https://blog.csdn.net/liaomingwu/article/details/121588217">博客</a>  </p>
<h3 id="5-忽略文件"><a href="#5-忽略文件" class="headerlink" title="5. 忽略文件"></a>5. 忽略文件</h3><p>    .gitignore可以让git彻底忽略跟踪指定文件。目的是让git仓库更小更快，避免重复无异议的文件管理。</p>
<p>    在项目根目录下创建.gitignore文件，匹配想要忽略的文件。并且git会自动匹配对应名称的文件夹或文件。</p>
<p>    <strong>注意:</strong> <strong>如果要忽略的文件已在暂存区中跟踪过，那么使用<code>git add .</code>并不会删除暂存区的文件。此时如果想要忽略相应文件，但是又并不想删除工作区中对应的文件，可以使用<code>git rm -f --cached 文件路径</code>来删除暂存区中的文件,再使用<code>git add .</code>此时暂存区中就不会再有想要忽略的文件了。</strong></p>
<h3 id="6-分支"><a href="#6-分支" class="headerlink" title="6. 分支"></a>6. 分支</h3><p>    1. 概念: 本质上是指向提交节点的可变指针，默认名字是master</p>
<p>    2. 注意: HEAD指针影响工作区&#x2F;暂存区的代码状态,即工作区与暂存区的内容为HEAD指针的版本的内容</p>
<p>    3. 场景: 开发新需求&#x2F;修复BUG时，保证主线代码随时可用，多人协同开发提高效率</p>
<h4 id="6-1-指令"><a href="#6-1-指令" class="headerlink" title="6.1 指令"></a>6.1 指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名 // 创建分支</span><br><span class="line">git checkout 分支名 // 切换分支(HEAD会指向切换的分支)</span><br><span class="line">git checkout -b 分支名 // 创建分支并切换到该分支</span><br><span class="line">git switch 分支名 // 创建分支</span><br><span class="line">git switch -c 分支名 // 创建并切换分支</span><br><span class="line"></span><br><span class="line">git branch // 查看有哪些分支</span><br><span class="line">git branch -d 分支名 // 安全删除本地分支</span><br><span class="line">git branch -D 分支名 // 强制删除本地分支</span><br></pre></td></tr></table></figure>

<h4 id="6-2-合并指令"><a href="#6-2-合并指令" class="headerlink" title="6.2 合并指令"></a>6.2 合并指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master // 切回到要合入的分支</span><br><span class="line">git merge 分支名 // 合并其他分支</span><br><span class="line">git branch -d 分支名 // 安全删除完成合并的分支指针</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> Fast forward合并方式是直接将HEAD指针移向要合并分支的最新版本，这种模式下，删除分支后，会丢失分支信息。</p>
<p>此时可以使用<code>--no-ff</code>进行合并，这样不会丢失分支信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge --no-ff 分支名 // 禁用Fast forward合并方式</span><br></pre></td></tr></table></figure>

<h4 id="6-3-合并与提交"><a href="#6-3-合并与提交" class="headerlink" title="6.3 合并与提交"></a>6.3 合并与提交</h4><p>    原分支产生新的提交记录后再合并回去后，自动使用多个快照记录合并后产生一次新的提交,大致情况如下图所示</p>
<img title src="/2025/02/12/git/t03.png" alt="分支" data-align="center" width="393">

<p><strong>提示：</strong> 也可以使用<code>git log --graph --oneline</code>在vscode终端中显示分支，如下图所示</p>
<p><img src="/2025/02/12/git/t04.png" alt="图形"></p>
<p>    在合并时，如果没有冲突会进入一个vim编辑器页面，输入的内容就是此次合并提交后的新提交的名字，可以选择默认的，也可以自定义。当然也可使用<code>git merge -m &#39;版本名&#39;  分支名</code>，来进行合并，这样就不会进入vim页面。合并后使用<code>git branch -d 分支名</code>删除被合并的分支</p>
<p>    <strong>冲突</strong>  两个分支对同一个文件的同一处代码进行了修改后，合并便会产生冲突,解决完冲突后需要使用<code>git add .</code>缓存更改,再使用<code>git commit -m 提交名</code>来创建一个新的版本快照</p>
<h2 id="四、远程仓库"><a href="#四、远程仓库" class="headerlink" title="四、远程仓库"></a>四、远程仓库</h2><h3 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1. 创建远程仓库"></a>1. 创建远程仓库</h3><p>    在github中创建一个仓库，因为之前设置了ssh key，所以复制仓库的ssh链接。而ssh key的方便之处就在于使用私人仓库时每次无需输入密码。</p>
<h3 id="2-添加远程仓库地址"><a href="#2-添加远程仓库地址" class="headerlink" title="2. 添加远程仓库地址"></a>2. 添加远程仓库地址</h3><p>    在项目根目录中，使用<code>git remot</code>命令进行添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程仓库ssh地址 // 创建地址,origin为远程仓库的别名</span><br><span class="line">git remote set-url origin 新地址 // 修改远程仓库origin地址</span><br><span class="line">git remote remove origin // 移除origin远程仓库</span><br><span class="line">git remote -v // 查看是否设置成功</span><br></pre></td></tr></table></figure>

<h3 id="3-推送代码"><a href="#3-推送代码" class="headerlink" title="3. 推送代码"></a>3. 推送代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master // 推送代码到远程的master分支下</span><br><span class="line">git push -u origin master // 使用 -u 后将本地分支与远程分支关联起来,之后可直接使用</span><br><span class="line">                          // git pull 与 git push</span><br><span class="line"></span><br><span class="line">git push --set-upstream origin master:master</span><br><span class="line">// 完整写法                     本地分支 远程分支</span><br></pre></td></tr></table></figure>

<h3 id="4-克隆远程仓库"><a href="#4-克隆远程仓库" class="headerlink" title="4. 克隆远程仓库"></a>4. 克隆远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong>  </p>
<ul>
<li><p>克隆后的本地仓库会自动建立好与远程仓库的链接，不再需要通过<code>git remote add origin 仓库地址</code></p>
</li>
<li><p>公开仓库可以随意克隆，推送需要身为仓库团队成员</p>
</li>
</ul>
<h2 id="五、多人协同开发"><a href="#五、多人协同开发" class="headerlink" title="五、多人协同开发"></a>五、多人协同开发</h2><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1. 指令"></a>1. 指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master:master // 推送代码(git push)</span><br><span class="line">                本地分支 远程分支</span><br><span class="line">git pull origin master:master // 拉取代码(git pull)</span><br><span class="line">                远程分支 本地分支</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li><p><code>git pull origin master</code>等价于<code>git fetch origin master:master</code>获取远程分支到本地，加上<code>git merge origin/master</code>进行合并</p>
</li>
<li><p>多人协作时推送代码时，需要先使用<code>git pull</code>拉取远程仓库中最新的版本进行合并，再使用<code>git push</code>进行推送</p>
</li>
<li><p>合并没有关系的记录需要使用</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase 远程仓库别名 分支名</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>代码版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql安装</title>
    <url>/2025/02/15/mysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>    虽然使用docker可以很方便的安装mysql，但是还是有必要知道正常是如何安装配置mysql的。事实上，安装mysql很简单但是配置初始密码比较复杂，且很多博客都没有给出准确的方法。</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1-下载mysql-server"><a href="#1-下载mysql-server" class="headerlink" title="1. 下载mysql-server"></a>1. 下载mysql-server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install mysql-server</span><br></pre></td></tr></table></figure>

<h3 id="2-开启服务"><a href="#2-开启服务" class="headerlink" title="2. 开启服务"></a>2. 开启服务</h3><p>使用<code>systemctl status mysql.service</code>，查看mysql服务是否运行</p>
<p><img src="/2025/02/15/mysql%E5%AE%89%E8%A3%85/t01.png" alt="运行"></p>
<p>显示<code>running</code>代表服务已启动。如果没有运行可以使用start指令启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start mysql</span><br></pre></td></tr></table></figure>

<p>设置<code>mysql</code>服务开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure>

<h2 id="三、设置root密码"><a href="#三、设置root密码" class="headerlink" title="三、设置root密码"></a>三、设置root密码</h2><h3 id="1-使用初始用户登录"><a href="#1-使用初始用户登录" class="headerlink" title="1. 使用初始用户登录"></a>1. 使用初始用户登录</h3><p>安装好后使用<code>mysql -u root -p</code>，会报错，因为初始没有设置密码</p>
<p><img src="/2025/02/15/mysql%E5%AE%89%E8%A3%85/t02.png" title alt="进入" data-align="center">实际上安装后会默认创建一个用户<code>debian-sys-maint</code>，密码存放在<code>/etc/mysql/debian.cnf</code>中，使用<code>sudo cat /etc/mysql/debian.cnf</code>查看密码</p>
<img src="/2025/02/15/mysql%E5%AE%89%E8%A3%85/t03.png" title alt="密码" data-align="center">

<p>接下来使用对应用户名密码登录。<code>mysql -u debian-sys-maint -p</code></p>
<p><img src="/2025/02/15/mysql%E5%AE%89%E8%A3%85/t04.png" alt="登录"></p>
<h3 id="2-查看user表"><a href="#2-查看user表" class="headerlink" title="2. 查看user表"></a>2. 查看user表</h3><p>在mysql中输入如下指令，结果如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/15/mysql%E5%AE%89%E8%A3%85/t05.png" alt="结果"></p>
<p>可以看到<code>root</code>的<code>plugin</code>为<code>auth_socket</code>方式，而我们要将其修改为<code>mysql_natice_password</code>方式，使用如下指令，结果如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> plugin<span class="operator">=</span><span class="string">&#x27;mysql_native_password&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; #修改密码格式</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,plugin <span class="keyword">from</span> <span class="keyword">user</span>; #查看修改结果</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/15/mysql%E5%AE%89%E8%A3%85/t06.png" alt="结果"></p>
<p>使用指令进行刷新</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>接下来使用如下指令设置<code>root</code>密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>最后所有的配置完成，可以使用<code>mysql -u root -p</code>，并输入设置密码进入</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
